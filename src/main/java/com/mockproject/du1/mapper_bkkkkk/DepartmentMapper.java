package com.mockproject.du1.mapper;

import com.mockproject.du1.model.Department;
import com.mockproject.du1.model.DepartmentExample;
import com.mockproject.du1.model.EmployeeOfDepartment;
import com.mockproject.du1.model.UserDepartment;

import java.util.List;
import org.apache.ibatis.annotations.Param;

public interface DepartmentMapper {

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table public.department
	 * 
	 * @mbg.generated Mon Nov 04 21:55:34 ICT 2019
	 */
	long countByExample(DepartmentExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table public.department
	 * 
	 * @mbg.generated Mon Nov 04 21:55:34 ICT 2019
	 */
	int deleteByExample(DepartmentExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table public.department
	 * 
	 * @mbg.generated Mon Nov 04 21:55:34 ICT 2019
	 */
	int deleteByPrimaryKey(Long id);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table public.department
	 * 
	 * @mbg.generated Mon Nov 04 21:55:34 ICT 2019
	 */
	int insert(Department record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table public.department
	 * 
	 * @mbg.generated Mon Nov 04 21:55:34 ICT 2019
	 */
	int insertSelective(Department record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table public.department
	 * 
	 * @mbg.generated Mon Nov 04 21:55:34 ICT 2019
	 */
	List<Department> selectByExample(DepartmentExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table public.department
	 * 
	 * @mbg.generated Mon Nov 04 21:55:34 ICT 2019
	 */
	Department selectByPrimaryKey(Long id);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table public.department
	 * 
	 * @mbg.generated Mon Nov 04 21:55:34 ICT 2019
	 */
	int updateByExampleSelective(@Param("record") Department record, @Param("example") DepartmentExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table public.department
	 * 
	 * @mbg.generated Mon Nov 04 21:55:34 ICT 2019
	 */
	int updateByExample(@Param("record") Department record, @Param("example") DepartmentExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table public.department
	 * 
	 * @mbg.generated Mon Nov 04 21:55:34 ICT 2019
	 */
	int updateByPrimaryKeySelective(Department record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table public.department
	 * 
	 * @mbg.generated Mon Nov 04 21:55:34 ICT 2019
	 */
	int updateByPrimaryKey(Department record);

	/**
	 * Get All Department
	 * 
	 * @return List<Department>
	 */
	List<Department> sqlGetAllDepartmentSelect();

	/**
	 * Get Department By Status
	 * 
	 * @param status
	 * @return List<Department>
	 */
	List<Department> sqlGetDepartmentByStatusSelect(int status);

	/**
	 * Get Department By Id
	 * 
	 * @param departmentId
	 * @return
	 */
	Department sqlGetDepartmentByIdSelect(int departmentId);

	/**
	 * Get Max Department
	 *
	 * @return Max Department Id
	 */
	long sqlGetMaxDepartmentIdSelect();

	/**
	 * Count Number Of Department By Name
	 * 
	 * @param departmentName
	 * @return Count Number Of Department By Name
	 */
	long sqlCountDepartmentByNameSelect(String departmentName);

	/**
	 * Count Number Of Department By Code
	 * 
	 * @param departmentCode
	 * @return Count Number Of Department By Code
	 */
	long sqlCountDepartmentByCodeSelect(String departmentCode);

	/**
	 * Get Max Department
	 *
	 * @param departmentId
	 * @param statusUserDepartment
	 * @param statusDepartment
	 * @param statusUser
	 * @param action
	 * @return List<EmployeeOfDepartment>
	 */
	List<EmployeeOfDepartment> sqlGetListEmployeeOfDepartmentByStatus(@Param("departmentId") int departmentId,
			@Param("statusUserDepartment") int statusUserDepartment, @Param("statusDepartment") int statusDepartment,
			@Param("statusUser") int statusUser, @Param("action") int action);

	/**
	 * Update Department Information
	 * 
	 * @param department
	 * @return
	 */
	int sqlDepartmentInfoUpdate(Department department);

	/**
	 * Update User Department Information
	 * 
	 * @param userDepartment
	 * @param newStayOrLeave
	 * @return
	 */
	int sqlRemoveEmployeeForDeparmentUpdate(@Param("UserDepartment") UserDepartment userDepartment,
			@Param("newStayOrLeave") int newStayOrLeave);

	/**
	 * Update Department Status
	 * 
	 * @param department
	 * @return
	 */
	int sqlDepartmentStatusUpdate(Department department);

	/**
	 * Insert Department Information
	 * 
	 * @param department
	 * @return
	 */
	int sqlDepartmentInsert(Department department);

	/**
	 * Insert New Employee For Deparment
	 * 
	 * @param userDepartment
	 * @return
	 */
	long sqlCheckExistUserDepartmentSelect(UserDepartment userDepartment);

	/**
	 * Insert New Employee For Deparment
	 * 
	 * @param userDepartment
	 * @return
	 */
	int sqlNewEmployeeForDeparmentInsert(UserDepartment userDepartment);

	/**
	 * Insert New Employee For Deparment
	 * 
	 * @param department
	 * @param action
	 * @return
	 */
	int sqlDepartmentNumberOfEmployeeUpdate(@Param("Department") Department department, @Param("action") int action);
}