<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.mockproject.du1.mapper.DepartmentMapper">

	<resultMap id="GetDepartmentResultMap"
		type="com.mockproject.du1.model.Department">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Mon Nov 04 
			21:55:34 ICT 2019. -->
		<id column="id" jdbcType="BIGINT" property="id" />
		<result column="code" jdbcType="VARCHAR" property="code" />
		<result column="name" jdbcType="VARCHAR" property="name" />
		<result column="number_of_employee" jdbcType="INTEGER"
			property="numberOfEmployee" />
		<result column="is_activated" jdbcType="INTEGER"
			property="isActivated" />
		<result column="updated_by" jdbcType="VARCHAR"
			property="updatedBy" />
		<result column="created_timestamp" jdbcType="TIMESTAMP"
			property="createdTimestamp" />
		<result column="updated_timestamp" jdbcType="TIMESTAMP"
			property="updatedTimestamp" />
	</resultMap>

	<!--Get List Data Department Information -->
	<select id="sqlGetAllDepartmentSelect"
		resultMap="GetDepartmentResultMap">
<![CDATA[
        SELECT
        id,
        name,
        code,
        CASE
        WHEN number_of_employee < 0 THEN 0
        ELSE number_of_employee
        END AS number_of_employee,
		is_activated,
		updated_by,
		created_timestamp,
		updated_timestamp
		FROM
		public.department
		ORDER BY
		code,
		name
]]>
	</select>

	<!--Get List Data Department Information Actived/Inactived -->
	<select id="sqlGetDepartmentByStatusSelect"
		resultMap="GetDepartmentResultMap" parameterType="Integer">
<![CDATA[
        SELECT
        id,
        name,
        code,
        CASE
        WHEN number_of_employee < 0 THEN 0
        ELSE number_of_employee
        END AS number_of_employee,
        is_activated,
        updated_by,
        created_timestamp,
        updated_timestamp
		FROM
		public.department
		WHERE
		is_activated = #{isActivated}
        ORDER BY
        code,
        name
]]>
	</select>

	<!--Get List Data Department Information By Id -->
	<select id="sqlGetDepartmentByIdSelect"
		resultMap="GetDepartmentResultMap" parameterType="Integer">
<![CDATA[
        SELECT
        id,
        name,
        code,
        CASE
        WHEN number_of_employee < 0 THEN 0
        ELSE number_of_employee
        END AS number_of_employee,
        is_activated,
        updated_by,
        created_timestamp,
        updated_timestamp
		FROM
		public.department
		WHERE
		id = #{id}
]]>

	</select>

	<!--Get Max Department Id -->
	<select id="sqlGetMaxDepartmentIdSelect" resultType="Long">

		SELECT
		COALESCE(MAX(department_id),0)
		FROM
		public.department

	</select>

	<!--Get Count Department: Check duplicate department name -->
	<select id="sqlCountDepartmentByNameSelect" resultType="Long"
		parameterType="String">

		SELECT
		COUNT(*)
		FROM
		public.department
		WHERE
		public.department.name = #{departmentName}

	</select>

	<!--Get Count Department: Check duplicate department code -->
	<select id="sqlCountDepartmentByCodeSelect" resultType="Long"
		parameterType="String">

		SELECT
		COUNT(*)
		FROM
		public.department
		WHERE
		public.department.code = #{departmentCode}

	</select>

	<!-- Get a list of non-departmental/departmental employees -->
	<resultMap
		type="com.mockproject.du1.model.EmployeeOfDepartment"
		id="listEmployeeOfDepartmentResultMap">
		<result property="userId" column="user_id" />
		<result property="firstName" column="first_name" />
		<result property="lastName" column="last_name" />
		<result property="email" column="email" />
		<result property="username" column="username" />
		<result property="password" column="password" />
		<result property="registeredDate" column="registered_date" />
		<result property="activatedDate" column="activated_date" />
		<result property="userRoleId" column="user_role_id" />
		<result property="userDepartmentId" column="user_department_id" />

		<collection property="departments"
			resultMap="GetDepartResultMap" />
		<collection property="roles" resultMap="GetRoleResultMap" />
	</resultMap>

	<resultMap id="GetDepartResultMap"
		type="com.mockproject.du1.model.Department">
		<id column="id" jdbcType="BIGINT" property="id" />
		<result column="code" jdbcType="VARCHAR" property="code" />
		<result column="name" jdbcType="VARCHAR" property="name" />
		<result column="number_of_employee" jdbcType="INTEGER"
			property="numberOfEmployee" />
		<result column="is_activated" jdbcType="INTEGER"
			property="isActivated" />
		<result column="updated_by" jdbcType="VARCHAR"
			property="updatedBy" />
		<result column="created_timestamp" jdbcType="TIMESTAMP"
			property="createdTimestamp" />
		<result column="updated_timestamp" jdbcType="TIMESTAMP"
			property="updatedTimestamp" />
	</resultMap>

	<resultMap id="GetRoleResultMap"
		type="com.mockproject.du1.model.Role">
		<id column="id" jdbcType="BIGINT" property="id" />
		<result column="code" jdbcType="VARCHAR" property="code" />
		<result column="name" jdbcType="VARCHAR" property="name" />
		<result column="is_activated" jdbcType="INTEGER"
			property="isActivated" />
		<result column="updated_by" jdbcType="VARCHAR"
			property="updatedBy" />
		<result column="created_timestamp" jdbcType="TIMESTAMP"
			property="createdTimestamp" />
		<result column="updated_timestamp" jdbcType="TIMESTAMP"
			property="updatedTimestamp" />
	</resultMap>

	<select id="sqlGetListEmployeeOfDepartmentByStatus"
		resultMap="listEmployeeOfDepartmentResultMap">

		SELECT
		a.id AS user_id,
		a.first_name AS first_name,
		a.last_name AS
		last_name,
		a.email AS email,
		a.username AS username,
		a.password AS
		password,
		a.registered_date AS registered_date,
		a.activated_date AS
		activated_date,
		a.seniority AS seniority,
		d.id AS department_id,
		d.name
		AS department_name,
		d.code AS department_code,
		c.id AS role_id,
		c.name AS
		role_name,
		c.code AS role_code

		FROM
		public.users a
		INNER JOIN
		public.user_department b ON a.id = b.user_id
		INNER JOIN public.role c
		ON c.id = b.role_id
		INNER JOIN public.department d ON d.id =
		b.department_id
		<!-- INNER JOIN public.user_role b ON a.user_id = b.user_id -->

		WHERE

		<if test="action == 1">
			NOT EXISTS (
			SELECT 1
			FROM
			user_department
			WHERE
			user_id = a.id
			AND
			((department_id = #{departmentId} AND
			stay_or_leave = 1))
			)
		</if>
		<if test="action == 2">
			EXISTS (
			SELECT 1
			FROM
			user_department
			WHERE
			user_id = a.id
			AND
			((department_id = #{departmentId} AND
			stay_or_leave = 1))
			)
		</if>
		AND d.is_activated = #{statusDepartment}
		AND a.is_activated =
		#{statusUser}

		ORDER BY
		a.first_name,
		a.last_name,
		a.email


	</select>

	<!--Update Department Information -->
	<update id="sqlDepartmentInfoUpdate"
		parameterType="com.mockproject.du1.model.Department">

		UPDATE public.department
		SET name = #{name},
		code =
		#{code},
		number_of_employee = #{numberOfEmployee},
		is_activated =
		#{isActivated},
		updated_by = #{updatedBy},
		updated_timestamp =
		#{updatedTimestamp}::timestamp without time zone
		WHERE
		id =
		#{departmentId}
	</update>

	<!--Update Department Number Of Employee -->
	<update id="sqlDepartmentNumberOfEmployeeUpdate">

		UPDATE public.department
		SET
		<if test="action == 1"> number_of_employee = number_of_employee +
			#{Department.numberOfEmployee},
		</if>
		<if test="action == 2"> number_of_employee = number_of_employee -
			#{Department.numberOfEmployee},
		</if>
		updated_by= #{Department.updatedBy},
		updated_timestamp =
		#{Department.updatedTimestamp}::timestamp without time zone
		WHERE
		id =
		#{Department.id}
	</update>

	<!--Update Department Status -->
	<update id="sqlDepartmentStatusUpdate"
		parameterType="com.mockproject.du1.model.Department">

		UPDATE public.department
		SET is_activated =
		#{isActivated},
		updated_by = #{updatedBy},
		updated_timestamp = #{updatedTimestamp}::timestamp without time zone
		WHERE
		id = #{id}

	</update>

	<!--Update User Department Status -->
	<update id="sqlRemoveEmployeeForDeparmentUpdate">

		UPDATE public.user_department
		SET stay_or_leave = #{newStayOrLeave},
		updated_by = #{UserDepartment.updatedBy},
		updated_timestamp = #{UserDepartment.updatedTimestamp}::timestamp
		WHERE
		department_id = #{UserDepartment.departmentId}
		AND user_id = #{UserDepartment.userId}
		AND stay_or_leave = #{UserDepartment.stayOrLeave}

	</update>

	<!--Insert Department Information -->
<!-- 	<insert id="sqlDepartmentInsert"
		parameterType="com.mockproject.du1.model.Department">
		INSERT INTO public.department
		(department_code,department_name,number_of_employee,is_activated,updated_by,created_timestamp,updated_timestamp)
		VALUES
		(#{departmentCode},#{departmentName},#{numberOfEmployees},#{isActivated},#{updateBy},#{createTimestamp}::timestamp
		without time zone,#{updateTimestamp}::timestamp without time zone)
	</insert> -->
	   <insert id="sqlDepartmentInsert" parameterType="com.mockproject.du1.model.Department">
        <!-- WARNING - @mbg.generated This element is automatically generated by 
            MyBatis Generator, do not modify. This element was generated on Mon Nov 04 
            21:55:34 ICT 2019. -->
        INSERT INTO public.department
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="code != null">
                code,
            </if>
            <if test="name != null">
                name,
            </if>
            <if test="numberOfEmployee != null">
                number_of_employee,
            </if>
            <if test="isActivated != null">
                is_activated,
            </if>
            <if test="updatedBy != null">
                updated_by,
            </if>
            <if test="createdTimestamp != null">
                created_timestamp,
            </if>
            <if test="updatedTimestamp != null">
                updated_timestamp,
            </if>
        </trim>
        <trim prefix="VALUES (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="code != null">
                #{code,jdbcType=VARCHAR},
            </if>
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="numberOfEmployee != null">
                #{numberOfEmployee,jdbcType=INTEGER},
            </if>
            <if test="isActivated != null">
                #{isActivated,jdbcType=INTEGER},
            </if>
            <if test="updatedBy != null">
                #{updatedBy,jdbcType=VARCHAR},
            </if>
            <if test="createdTimestamp != null">
                #{createdTimestamp,jdbcType=TIMESTAMP},
            </if>
            <if test="updatedTimestamp != null">
                #{updatedTimestamp,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>

	<!--Check exist user_department -->
	<select id="sqlCheckExistUserDepartmentSelect" resultType="long"
		parameterType="com.mockproject.du1.model.UserDepartment">
		SELECT COUNT(*)
		FROM public.user_department
		WHERE
		department_id = #{departmentId}
		AND user_id = #{userId}
		AND stay_or_leave = #{stayOrLeave}

	</select>


	<!--Insert New Employee For Department -->
	<insert id="sqlNewEmployeeForDeparmentInsert"
		parameterType="com.mockproject.du1.model.UserDepartment">
		INSERT INTO public.user_department
		(department_id,user_id,stay_or_leave,join_date,leave_date,updated_by,created_timestamp,updated_timestamp)
		VALUES
		(#{departmentId},#{userId},#{stayOrLeave},#{joinDate}::date,#{leaveDate}::date,#{updateBy},#{createTimestamp}::timestamp
		without time zone,#{updateTimestamp}::timestamp without time zone)
	</insert>

	<sql id="Example_Where_Clause">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Mon Nov 04 
			21:55:34 ICT 2019. -->
		<where>
			<foreach collection="oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value"
										item="listItem" open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Mon Nov 04 
			21:55:34 ICT 2019. -->
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value"
										item="listItem" open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Mon Nov 04 
			21:55:34 ICT 2019. -->
		id, code, name, number_of_employee, is_activated, updated_by,
		created_timestamp,
		updated_timestamp
	</sql>
	<select id="selectByExample"
		parameterType="com.mockproject.du1.model.DepartmentExample"
		resultMap="GetDepartmentResultMap">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Mon Nov 04 
			21:55:34 ICT 2019. -->
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		from public.department
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<select id="selectByPrimaryKey" parameterType="java.lang.Long"
		resultMap="GetDepartmentResultMap">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Mon Nov 04 
			21:55:34 ICT 2019. -->
		select
		<include refid="Base_Column_List" />
		from public.department
		where id = #{id,jdbcType=BIGINT}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Mon Nov 04 
			21:55:34 ICT 2019. -->
		delete from public.department
		where id = #{id,jdbcType=BIGINT}
	</delete>
	<delete id="deleteByExample"
		parameterType="com.mockproject.du1.model.DepartmentExample">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Mon Nov 04 
			21:55:34 ICT 2019. -->
		delete from public.department
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>
	
	<select id="countByExample"
		parameterType="com.mockproject.du1.model.DepartmentExample"
		resultType="java.lang.Long">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Mon Nov 04 
			21:55:34 ICT 2019. -->
		select count(*) from public.department
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<update id="updateByExampleSelective" parameterType="map">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Mon Nov 04 
			21:55:34 ICT 2019. -->
		update public.department
		<set>
			<if test="record.id != null">
				id = #{record.id,jdbcType=BIGINT},
			</if>
			<if test="record.code != null">
				code = #{record.code,jdbcType=VARCHAR},
			</if>
			<if test="record.name != null">
				name = #{record.name,jdbcType=VARCHAR},
			</if>
			<if test="record.numberOfEmployee != null">
				number_of_employee =
				#{record.numberOfEmployee,jdbcType=INTEGER},
			</if>
			<if test="record.isActivated != null">
				is_activated = #{record.isActivated,jdbcType=INTEGER},
			</if>
			<if test="record.updatedBy != null">
				updated_by = #{record.updatedBy,jdbcType=VARCHAR},
			</if>
			<if test="record.createdTimestamp != null">
				created_timestamp =
				#{record.createdTimestamp,jdbcType=TIMESTAMP},
			</if>
			<if test="record.updatedTimestamp != null">
				updated_timestamp =
				#{record.updatedTimestamp,jdbcType=TIMESTAMP},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Mon Nov 04 
			21:55:34 ICT 2019. -->
		update public.department
		set id = #{record.id,jdbcType=BIGINT},
		code =
		#{record.code,jdbcType=VARCHAR},
		name =
		#{record.name,jdbcType=VARCHAR},
		number_of_employee =
		#{record.numberOfEmployee,jdbcType=INTEGER},
		is_activated =
		#{record.isActivated,jdbcType=INTEGER},
		updated_by =
		#{record.updatedBy,jdbcType=VARCHAR},
		created_timestamp =
		#{record.createdTimestamp,jdbcType=TIMESTAMP},
		updated_timestamp =
		#{record.updatedTimestamp,jdbcType=TIMESTAMP}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByPrimaryKeySelective"
		parameterType="com.mockproject.du1.model.Department">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Mon Nov 04 
			21:55:34 ICT 2019. -->
		update public.department
		<set>
			<if test="code != null">
				code = #{code,jdbcType=VARCHAR},
			</if>
			<if test="name != null">
				name = #{name,jdbcType=VARCHAR},
			</if>
			<if test="numberOfEmployee != null">
				number_of_employee =
				#{numberOfEmployee,jdbcType=INTEGER},
			</if>
			<if test="isActivated != null">
				is_activated = #{isActivated,jdbcType=INTEGER},
			</if>
			<if test="updatedBy != null">
				updated_by = #{updatedBy,jdbcType=VARCHAR},
			</if>
			<if test="createdTimestamp != null">
				created_timestamp =
				#{createdTimestamp,jdbcType=TIMESTAMP},
			</if>
			<if test="updatedTimestamp != null">
				updated_timestamp =
				#{updatedTimestamp,jdbcType=TIMESTAMP},
			</if>
		</set>
		where id = #{id,jdbcType=BIGINT}
	</update>
	<update id="updateByPrimaryKey"
		parameterType="com.mockproject.du1.model.Department">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Mon Nov 04 
			21:55:34 ICT 2019. -->
		update public.department
		set code = #{code,jdbcType=VARCHAR},
		name =
		#{name,jdbcType=VARCHAR},
		number_of_employee =
		#{numberOfEmployee,jdbcType=INTEGER},
		is_activated =
		#{isActivated,jdbcType=INTEGER},
		updated_by =
		#{updatedBy,jdbcType=VARCHAR},
		created_timestamp =
		#{createdTimestamp,jdbcType=TIMESTAMP},
		updated_timestamp =
		#{updatedTimestamp,jdbcType=TIMESTAMP}
		where id =
		#{id,jdbcType=BIGINT}
	</update>
</mapper>