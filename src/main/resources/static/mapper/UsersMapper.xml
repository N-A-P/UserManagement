<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.mockproject.du1.mapper.UsersMapper">

	<!-- =========== RESULT MAP =============== -->

	<!--Get List Data User Information -->
	<resultMap id="GetUserResultMap"
		type="com.mockproject.du1.model.Users">
		<result property="userId" column="user_id" />
		<result property="firstName" column="first_name" />
		<result property="lastName" column="last_name" />
		<result property="dob" column="dob" />
		<result property="email" column="email" />
		<result property="username" column="username" />
		<result property="password" column="password" />
		<result property="registeredDate" column="registered_date" />
		<result property="activatedDate" column="activated_date" />
		<result property="seniority" column="seniority" />
		<result property="isActivated" column="is_activated" />
		<result property="updatedBy" column="updated_by" />
		<result property="createdTimestamp" column="created_timestamp" />
		<result property="updatedTimestamp" column="updated_timestamp" />
	</resultMap>

	<resultMap id="GetUserFullResultMap"
		type="com.mockproject.du1.model.UsersFull">
		<result property="userId" column="user_id" />
		<result property="firstName" column="first_name" />
		<result property="lastName" column="last_name" />
		<result property="dob" column="dob" />
		<result property="email" column="email" />
		<result property="username" column="username" />
		<result property="password" column="password" />
		<result property="registeredDate" column="registered_date" />
		<result property="seniority" column="seniority" />
		<result property="isActivated" column="is_activated" />
		<result property="activatedDate" column="activated_date" />
		<collection property="listRole"
			resultMap="GetRoleResultMap" />
		<collection property="listDepartment"
			resultMap="GetDepartResultMap" />

	</resultMap>

	<resultMap id="GetDepartResultMap"
		type="com.mockproject.du1.model.Department">
		<result property="departmentId" column="department_id" />
		<result property="departmentName" column="department_name" />
		<result property="departmentCode" column="department_code" />	
	</resultMap>

	<resultMap id="GetRoleResultMap"
		type="com.mockproject.du1.model.Role">
		<result property="roleId" column="role_id" />
		<result property="roleName" column="role_name" />
	</resultMap>


	<!-- =========== SELECT =============== -->

	<!--Check user login -->
	<select id="sqlGetUserLoginSelect"
		resultMap="GetUserResultMap" parameterType="String">
		SELECT 
		users.username,
		users.password,
		users.is_activated
		FROM public.users
		WHERE
		public.users.username = #{username}
	</select>

	<!--Get List Data User Information -->
	<select id="sqlGetAllUserFullSelect"
		resultMap="GetUserFullResultMap" parameterType="Integer">
		SELECT
		users.user_id,
		users.first_name,
		users.last_name,
		users.is_activated,
		users.email,
		users.username,
		users.password,
		users.dob,
		users.registered_date,
		department.department_id,
		department.department_name,
		department.department_code,
		public.role.role_id,
		public.role.role_name
		FROM
		users left join user_department on
		users.user_id =
		user_department.user_id
		left join department ON
		department.department_id =
		user_department.department_id
		left join
		user_role ON users.user_id = user_role.user_id left join role
		on
		user_role.role_id = role.role_id
		<if test="isActivated != null">
			where
			users.is_activated = #{isActivated}
		</if>
	</select>

	<!--Get List Data User Information By Username -->
	<select id="sqlGetUserByUsernameSelect"
		resultMap="GetUserResultMap" parameterType="String">
		SELECT
		user_id,
		first_name,
		last_name, dob, email, username, password,
		registered_date,activated_date,
		seniority, is_activated,
		updated_by,created_timestamp,updated_timestamp
		FROM
		public.users
		WHERE
		username = #{username}
	</select>

	<!--Get List Data User Information By Email -->
	<select id="sqlGetUserByEmailSelect"
		resultMap="GetUserResultMap" parameterType="String">
		SELECT
		user_id,
		first_name,
		last_name, dob, email, username, password,
		registered_date,activated_date
		seniority, is_activated,
		updated_by,created_timestamp,updated_timestamp
		FROM
		public.users
		WHERE
		email = #{email}
	</select>

	<!--Get List Data User Information By user_id -->
	<select id="sqlGetUserByIdSelect" resultMap="GetUserResultMap"
		parameterType="Integer">
		SELECT
		user_id,
		first_name, last_name, dob, email,
		username, password,
		registered_date,activated_date,
		seniority,
		is_activated,
		updated_by,created_timestamp,updated_timestamp
		FROM
		public.users
		WHERE
		user_id= #{userId}
	</select>

	<!--Count records user_id in Table user_department -->
	<select id="sqlCountUserDepartmentSelect" resultType="Integer"
		parameterType="Integer">
		SELECT
		COUNT (*)
		FROM
		public.user_department
		WHERE
		user_id =
		#{userId}
	</select>

	<!--Count records user_id in Table user_role -->
	<select id="sqlCountUserRoleSelect" resultType="Integer"
		parameterType="Integer">
		SELECT
		COUNT (*)
		FROM
		public.user_role
		WHERE
		user_id =
		#{userId}
	</select>


	<!--Get user_department_id by department_id and user_id in Table user_department -->
	<select id="sqlGetUserDepartmentSelect" resultType="Integer"
		parameterType="Integer">
		SELECT
		user_department_id
		FROM
		public.user_department
		WHERE
		user_id = #{userId}
		AND
		department_id=#{departmentId}
	</select>

	<!--Get user_role_id by role_id and user_id in Table user_role -->
	<select id="sqlGetUserRoleSelect" resultType="Integer"
		parameterType="Integer">
		SELECT
		user_role_id
		FROM
		public.user_role
		WHERE
		user_id =
		#{userId}
		AND
		role_id=#{roleId}
	</select>

	<!-- =========== INSERT =============== -->

	<!--Insert new record into Table User -->
	<insert id="sqlCreateUserInsert"
		parameterType="com.mockproject.du1.model.Users">
		INSERT INTO public.users
		(first_name,last_name,email,username,password,dob,registered_date,seniority,is_activated,created_timestamp)
		VALUES
		(#{firstName},#{lastName},#{email},#{username},#{password},
		TO_DATE(#{dob},'YYYY-MM-DD'),
		TO_DATE(#{registeredDate},'YYYY-MM-DD'),
		#{seniority},
		#{isActivated},
		#{createdTimestamp}::timestamp without
		time zone)
	</insert>

	<!-- =========== UPDATE =============== -->


	<!--Update record in Table User -->
	<update id="sqlUpdateUserUpdate"
		parameterType="com.mockproject.du1.model.Users">
		UPDATE public.users
		SET
		first_name=#{firstName},
		last_name=#{lastName},
		username=#{username},
		email=#{email},
		password=#{password},
		dob=TO_DATE(#{dob},'YYYY-MM-DD'),
		updated_by=#{updatedBy},
		updated_timestamp=#{updatedTimestamp}::timestamp without time zone
		WHERE
		user_id=#{userId}
	</update>

	<!--Update record in Table user -->
	<update id="sqlActivateDeactivateUserUpdate"
		parameterType="com.mockproject.du1.model.Users">
		UPDATE public.users
		SET
		activated_date=TO_DATE(#{activatedDate},'YYYY-MM-DD'),
		is_activated=#{isActivated},
		updated_by=#{updatedBy},
		updated_timestamp=#{updatedTimestamp}::timestamp without time zone
		WHERE
		user_id=#{userId}
	</update>

	<!--Update record in Table user_department -->
	<update id="sqlActivateDeactivateUserDepartmentUpdate"
		parameterType="com.mockproject.du1.model.UserDepartment">
		UPDATE
		public.user_department
		SET leave_date=TO_DATE(#{leaveDate},'YYYY-MM-DD'),
		stay_or_leave=#{stayOrLeave},
		updated_by=#{updateBy},
		updated_timestamp=#{updateTimestamp}::timestamp without time zone
		WHERE
		user_id=#{userId}
	</update>

	<!--Update record in Tables user_role -->
	<update id="sqlActivateDeactivateUserRoleUpdate"
		parameterType="com.mockproject.du1.model.UserRole">
		UPDATE
		public.user_role
		SET leave_date=TO_DATE(#{leaveDate},'YYYY-MM-DD'),
		updated_by=#{updateBy},
		updated_timestamp=#{updateTimestamp}::timestamp without time zone
		WHERE
		user_id=#{userId}
	</update>



	<!-- =========== DELETE =============== -->


</mapper>