<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.mockproject.du1.mapper.DepartmentMapper">

	<!--Get List Data Department Information -->
	<resultMap id="GetDepartmentResultMap"
		type="com.mockproject.du1.model.Department">
		<result property="departmentId" column="department_id" />
		<result property="departmentName" column="department_name" />
		<result property="numberOfEmployees"
			column="number_of_employees" />
		<result property="status" column="status" />
	</resultMap>

	<!--Get List Data Department Information -->
	<select id="sqlGetAllDepartmentSelect"
		resultMap="GetDepartmentResultMap">

		SELECT
		department_id,
		department_name,
		number_of_employees,
		status
		FROM
		public.department

	</select>

	<!--Get List Data Department Information By Status -->
	<select id="sqlGetDepartmentByStatusSelect"
		resultMap="GetDepartmentResultMap" parameterType="Integer">

		SELECT
		department_id,
		department_name,
		number_of_employees,
		status
		FROM
		public.department
		WHERE
		status = #{status}

	</select>

	<!--Get List Data Department Information By Id -->
	<select id="sqlGetDepartmentByIdSelect"
		resultMap="GetDepartmentResultMap" parameterType="Integer">

		SELECT
		department_id,
		department_name,
		number_of_employees,
		status
		FROM
		public.department
		WHERE
		department_id = #{department_id}

	</select>

	<!--Get Max Department Id -->
	<select id="sqlGetMaxDepartmentIdSelect" resultType="Long">

		SELECT
		COALESCE(MAX(department_id),0)
		FROM
		public.department

	</select>

	<!-- Get a list of non-departmental/departmental employees -->
	<resultMap
		type="com.mockproject.du1.model.EmployeeOfDepartment"
		id="listEmployeeOfDepartmentResultMap">
		<result property="userId" column="user_id" />
		<result property="firstName" column="first_name" />
		<result property="lastName" column="last_name" />
		<result property="email" column="email" />
		<result property="tenure" column="tenure" />
		<result property="roleDetailId" column="role_detail_id" />
		<result property="roleId" column="role_id" />
		<result property="roleName" column="role_name" />
		<result property="departmentDetailId"
			column="department_detail_id" />
		<result property="departmentId" column="department_id" />
		<result property="departmentName" column="department_name" />
	</resultMap>

	<select id="sqlGetListEmployeeOfDepartmentByStatus"
		resultMap="listEmployeeOfDepartmentResultMap">

		SELECT
		a.user_id AS user_id,
		a.first_name AS first_name,
		a.last_name AS
		last_name,
		a.email AS email,
		a.tenure AS tenure,
		b.role_detail_id AS
		role_detail_id,
		c.role_id AS role_id,
		c.role_name AS role_name,
		COALESCE(d.department_detail_id,-1) AS department_detail_id,
		e.department_id AS department_id,
		e.department_name AS department_name

		FROM public.users a

		INNER JOIN
		public.role_detail b
		ON a.user_id =
		b.user_id

		INNER JOIN public.role c
		ON c.role_id = b.role_id

		INNER JOIN
		public.department_detail d
		ON a.user_id = d.user_id

		INNER JOIN
		public.department e
		ON
		e.department_id = d.department_id

		WHERE
		<if test="action == 1"> e.department_id NOT IN (#{department_id})</if>
		<if test="action == 2"> e.department_id = #{department_id}</if>
			<![CDATA[ 
			AND c.role_id <= #{role_id}
			]]>
		<if test="action == 1">AND d.status IN (0,1)</if>
		<if test="action == 2">AND d.status = #{statusDepartmentDetail}</if>
		AND e.status = #{statusDepartment}
		AND a.status = #{statusUser}

	</select>

	<!--Update Department Information -->
	<update id="sqlDepartmentInfoUpdate"
		parameterType="com.mockproject.du1.model.Department">

		UPDATE public.department
		SET department_name =
		#{departmentName},
		number_of_employees = #{numberOfEmployees}
		WHERE
		department_id = #{departmentId}
	</update>

	<!--Update Department Status -->
	<update id="sqlDepartmentStatusUpdate">

		UPDATE public.department
		SET status = #{status}
		WHERE
		department_id = #{departmentId}
		
	</update>
	
	<!--Update Department Detail Status -->
	<update id="sqlDepartmentDetailStatusUpdate">

		UPDATE public.department_detail
		SET status = #{status}
		WHERE
		department_detail_id = #{departmentDetailId}
		
	</update>

	<!--Insert Department Information -->
	<insert id="sqlDepartmentInsert"
		parameterType="com.mockproject.du1.model.Department">
		INSERT INTO public.department
		(department_name,number_of_employees,status)
		VALUES
		(#{departmentName},#{numberOfEmployees},#{status})
	</insert>

	<!--Insert New Employee For Department -->
	<insert id="sqlNewEmployeeForDeparmentInsert">
		INSERT INTO public.department_detail
		(status,department_id,user_id)
		VALUES
		(#{status},#{EmployeeOfDepartment.departmentId},#{EmployeeOfDepartment.userId})
	</insert>

</mapper>