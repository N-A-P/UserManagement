<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.mockproject.du1.mapper.DepartmentMapper">

	<!--Get List Data Department Information Result Map -->
	<resultMap id="GetDepartmentResultMap"
		type="com.mockproject.du1.model.Department">
		<result property="departmentId" column="department_id" />
		<result property="departmentName" column="department_name" />
		<result property="departmentCode" column="department_code" />
		<result property="numberOfEmployees"
			column="number_of_employee" />
		<result property="isActivated" column="is_activated" />
		<result property="updateBy" column="updated_by" />
		<result property="createTimestamp" column="created_timestamp" />
		<result property="updateTimestamp" column="updated_timestamp" />
	</resultMap>

	<!--Get List Data Department Information -->
	<select id="sqlGetAllDepartmentSelect"
		resultMap="GetDepartmentResultMap">

		SELECT
		department_id,
		department_name,
		department_code,
		number_of_employee,
		is_activated,
		updated_by,
		created_timestamp,
		updated_timestamp
		FROM
		public.department
		ORDER BY
		department_code,
		department_name

	</select>

	<!--Get List Data Department Information Actived/Inactived -->
	<select id="sqlGetDepartmentByStatusSelect"
		resultMap="GetDepartmentResultMap" parameterType="Integer">

		SELECT
		department_id,
		department_name,
		department_code,
		number_of_employee,
		is_activated,
		updated_by,
		created_timestamp,
		updated_timestamp
		FROM
		public.department
		WHERE
		is_activated = #{isActivated}
		ORDER BY
		department_code,
		department_name

	</select>

	<!--Get List Data Department Information By Id -->
	<select id="sqlGetDepartmentByIdSelect"
		resultMap="GetDepartmentResultMap" parameterType="Integer">

		SELECT
		department_id,
		department_name,
		department_code,
		number_of_employee,
		is_activated,
		updated_by,
		created_timestamp,
		updated_timestamp
		FROM
		public.department
		WHERE
		department_id = #{department_id}


	</select>

	<!--Get Max Department Id -->
	<select id="sqlGetMaxDepartmentIdSelect" resultType="Long">

		SELECT
		COALESCE(MAX(department_id),0)
		FROM
		public.department

	</select>

	<!--Get Count Department: Check duplicate department name -->
	<select id="sqlCountDepartmentByNameSelect" resultType="Long"
		parameterType="String">

		SELECT
		COUNT(*)
		FROM
		public.department
		WHERE
		public.department.department_name = #{departmentName}

	</select>

	<!--Get Count Department: Check duplicate department code -->
	<select id="sqlCountDepartmentByCodeSelect" resultType="Long"
		parameterType="String">

		SELECT
		COUNT(*)
		FROM
		public.department
		WHERE
		public.department.department_code = #{departmentCode}

	</select>

	<!-- Get a list of non-departmental/departmental employees -->
	<resultMap
		type="com.mockproject.du1.model.EmployeeOfDepartment"
		id="listEmployeeOfDepartmentResultMap">
		<result property="userId" column="user_id" />
		<result property="firstName" column="first_name" />
		<result property="lastName" column="last_name" />
		<result property="email" column="email" />
		<result property="username" column="username" />
		<result property="password" column="password" />
		<result property="registeredDate" column="registered_date" />
		<result property="activatedDate" column="activated_date" />
		<result property="userRoleId" column="user_role_id" />
		<result property="userDepartmentId" column="user_department_id" />

		<collection property="departments"
			resultMap="GetDepartResultMap" />
		<collection property="roles" resultMap="GetRoleResultMap" />
	</resultMap>

	<resultMap id="GetDepartResultMap"
		type="com.mockproject.du1.model.Department">
		<result property="departmentId" column="department_id" />
		<result property="departmentName" column="department_name" />
	</resultMap>

	<resultMap id="GetRoleResultMap"
		type="com.mockproject.du1.model.Role">
		<result property="roleId" column="role_id" />
		<result property="roleName" column="role_name" />
	</resultMap>

	<select id="sqlGetListEmployeeOfDepartmentByStatus"
		resultMap="listEmployeeOfDepartmentResultMap">

		SELECT
		a.user_id AS user_id,
		a.first_name AS first_name,
		a.last_name AS
		last_name,
		a.email AS email,
		a.username AS username,
		a.password AS
		password,
		a.registered_date AS registered_date,
		a.activated_date AS
		activated_date,
		a.seniority AS seniority,
		c.role_id AS role_id,
		c.role_name AS role_name,
		c.role_name AS role_code,
		e.department_id AS
		department_id,
		e.department_name AS department_name,
		e.department_code
		AS department_code
		FROM
		public.users a
		INNER JOIN public.user_role b ON
		a.user_id = b.user_id
		INNER JOIN public.role c ON c.role_id = b.role_id
		INNER JOIN public.user_department d ON a.user_id = d.user_id
		INNER JOIN
		public.department e ON e.department_id = d.department_id
		WHERE

		<if test="action == 1">
			<!-- ((e.department_id = #{departmentId} AND d.stay_or_leave = 0) OR (e.department_id 
				NOT IN (#{departmentId}) AND d.stay_or_leave = 1)) -->
			NOT EXISTS (SELECT 1
			FROM user_department
			WHERE
			user_id = a.user_id
			AND
			((department_id = #{departmentId} AND stay_or_leave = 1))
			)


		</if>
		<if test="action == 2">
			e.department_id = #{departmentId}
			AND d.stay_or_leave =
			#{statusUserDepartment}
		</if>
		AND e.is_activated = #{statusDepartment}
		AND a.is_activated =
		#{statusUser}

		ORDER BY
		a.first_name,
		a.last_name,
		a.email


	</select>

	<!--Update Department Information -->
	<update id="sqlDepartmentInfoUpdate"
		parameterType="com.mockproject.du1.model.Department">

		UPDATE public.department
		SET department_name =
		#{departmentName},
		department_code = #{departmentCode},
		number_of_employee = #{numberOfEmployees},
		is_activated
		=#{isActivated},
		updated_by=#{updateBy},
		updated_timestamp
		=#{updateTimestamp}::timestamp without time zone
		WHERE
		department_id =
		#{departmentId}
	</update>

	<!--Update Department Number Of Employee -->
	<update id="sqlDepartmentNumberOfEmployeeUpdate"
		parameterType="com.mockproject.du1.model.Department">

		UPDATE public.department
		SET
		number_of_employee =
		number_of_employee + #{numberOfEmployees},
		updated_by=#{updateBy},
		updated_timestamp
		=#{updateTimestamp}::timestamp without time zone
		WHERE
		department_id =
		#{departmentId}
	</update>

	<!--Update Department Status -->
	<update id="sqlDepartmentStatusUpdate">

		UPDATE public.department
		SET is_activated =
		#{isActivated},
		updated_by= #{updateBy},
		updated_timestamp
		=#{updateTimestamp}::timestamp without time zone
		WHERE
		department_id =
		#{departmentId}

	</update>

	<!--Update User Department Status -->
	<update id="sqlRemoveEmployeeForDeparmentUpdate"
		parameterType="com.mockproject.du1.model.UserDepartment">

		UPDATE public.user_department
		SET stay_or_leave =
		#{stayOrLeave},
		updated_by=#{updateBy},
		updated_timestamp
		=#{updateTimestamp}
		WHERE
		user_department_id = #{userDepartmentId}

	</update>

	<!--Insert Department Information -->
	<insert id="sqlDepartmentInsert"
		parameterType="com.mockproject.du1.model.Department">
		INSERT INTO public.department
		(department_code,department_name,number_of_employee,is_activated,updated_by,created_timestamp,updated_timestamp)
		VALUES
		(#{departmentCode},#{departmentName},#{numberOfEmployees},#{isActivated},#{updateBy},#{createTimestamp}::timestamp
		without time zone,#{updateTimestamp}::timestamp without time zone)
	</insert>

	<!--Check exist user_department -->
	<select id="sqlCheckExistUserDepartmentSelect" resultType="long"
		parameterType="com.mockproject.du1.model.UserDepartment">
		SELECT COUNT(*)
		FROM public.user_department
		WHERE
		department_id =
		#{departmentId}
		AND user_id = #{userId}
		AND stay_or_leave
		=
		#{stayOrLeave}

	</select>


	<!--Insert New Employee For Department -->
	<insert id="sqlNewEmployeeForDeparmentInsert"
		parameterType="com.mockproject.du1.model.UserDepartment">
		INSERT INTO public.user_department
		(department_id,user_id,stay_or_leave,join_date,leave_date,updated_by,created_timestamp,updated_timestamp)
		VALUES
		(#{departmentId},#{userId},#{stayOrLeave},#{joinDate}::date,#{leaveDate}::date,#{updateBy},#{createTimestamp}::timestamp
		without time zone,#{updateTimestamp}::timestamp without time zone)
	</insert>

</mapper>