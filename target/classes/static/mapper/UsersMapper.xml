<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.mockproject.du1.mapper.UsersMapper">

	<!-- =========== RESULT MAP =============== -->

	<!--Get List Data User Information -->
	<resultMap id="GetUserResultMap"
		type="com.mockproject.du1.model.Users">
		<result property="userId" column="user_id" />
		<result property="firstName" column="first_name" />
		<result property="lastName" column="last_name" />
		<result property="dob" column="dob" />
		<result property="email" column="email" />
		<result property="username" column="username" />
		<result property="password" column="password" />
		<result property="registeredDate" column="registered_date" />
		<result property="activatedDate" column="activated_date" />
		<result property="seniority" column="seniority" />
		<result property="isActivated" column="is_activated" />
		<result property="updateBy" column="updated_by" />
		<result property="createTimestamp" column="created_timestamp" />
		<result property="updateTimestamp" column="updated_timestamp" />
	</resultMap>

	<!--Get List Data UserFull Information -->
	<!--<resultMap id="GetUserFullResultMap" type="com.mockproject.du1.model.UsersFull"> 
		<result property="userId" column="user_id" /> <result property="firstName" 
		column="first_name" /> <result property="lastName" column="last_name" /> 
		<result property="email" column="email" /> <result property="username" column="username" 
		/> <result property="password" column="password" /> <result property="dob" 
		column="dob" /> <result property="startDate" column="start_date" /> <result 
		property="endDate" column="end_date" /> <result property="tenure" column="tenure" 
		/> <result property="status" column="status" /> <result property="roleDetailId" 
		column="role_detail_id" /> <result property="roleId" column="role_id" /> 
		</resultMap> -->


	<!-- =========== SELECT =============== -->

	<!--Check user login -->
	<select id="sqlCheckLoginSelect" resultType="Long"
		parameterType="com.mockproject.du1.model.Users">
		SELECT COUNT(*)
		FROM public.users
		WHERE
		public.users.username = #{username}
		AND public.users.password =
		#{password}
	</select>

	<!--Get List Data User Information -->
	<select id="sqlGetAllUserSelect" resultMap="GetUserResultMap">
		SELECT
		user_id,
		first_name, last_name, dob, email, username, password,
		registered_date,activated_date,
		seniority, is_activated,
		updated_by,created_timestamp,updated_timestamp
		FROM
		public.users
		WHERE
		is_activated = 1
	</select>

	<!--Get List Data User Information By Username -->
	<select id="sqlGetUserByUsernameSelect"
		resultMap="GetUserResultMap" parameterType="String">
		SELECT
		user_id,
		first_name,
		last_name, dob, email, username, password,
		registered_date,activated_date,
		seniority, is_activated,
		updated_by,created_timestamp,updated_timestamp
		FROM
		public.users
		WHERE
		username = #{username}
	</select>

	<!--Get List Data User Information By Email -->
	<select id="sqlGetUserByEmailSelect"
		resultMap="GetUserResultMap" parameterType="String">
		SELECT
		user_id,
		first_name,
		last_name, dob, email, username, password,
		registered_date,activated_date
		seniority, is_activated,
		updated_by,created_timestamp,updated_timestamp
		FROM
		public.users
		WHERE
		email = #{email}
	</select>

	<!--Get List Data User Information By user_id -->
	<select id="sqlGetUserByIdSelect" resultMap="GetUserResultMap"
		parameterType="String">
		SELECT
		user_id,
		first_name, last_name, dob, email,
		username, password,
		registered_date,activated_date,
		seniority,
		is_activated,
		updated_by,created_timestamp,updated_timestamp
		FROM
		public.users
		WHERE
		user_id= #{userId}
	</select>

	<!--Get List Data All UserFull Information -->
	<!--<select id="sqlGetAllUserFullSelect" resultMap="GetUserFullResultMap" 
		parameterType="String"> SELECT users.user_id,first_name,last_name,email,username,password,dob,start_date,end_date,tenure,status,role_detail_id,role_detail.role_id 
		FROM public.users INNER JOIN public.role_detail ON users.user_id = role_detail.user_id 
		INNER JOIN public.role ON role_detail.role_id = role.role_id WHERE users.status=1 
		</select> -->

	<!--Get number of user_id by department_id and user_id in Table department_detail -->
	<select id="sqlSelectDepartmentDetailSelect"
		resultType="Integer" parameterType="Integer">
		SELECT
		COUNT (*)
		FROM
		public.department_detail
		WHERE
		user_id = #{userId}
		AND
		department_id=#{departmentId}
	</select>

	<!--Search user list -->
	<select id="sqlSelectSearchSelect" resultMap="GetUserResultMap" parameterType="String">
	 <bind name="pattern" value="'%' + #{toSearch} + '%'" />
		SELECT
		user_id,first_name,last_name,dob,email,username,users.password,registered_date,activated_date,seniority,
		is_activated,updated_by,created_timestamp,updated_timestamp		
		FROM PUBLIC.USERS
		WHERE (first_name LIKE #{pattern}) 
	</select>

	<!-- =========== INSERT =============== -->

	<!--Insert new record into Table User -->
	<insert id="sqlCreateUserInsert"
		parameterType="com.mockproject.du1.model.Users">
		INSERT INTO public.users
		(first_name, last_name, dob,
		email, username, password,
		registered_date, activated_date, seniority, is_activated, updated_by,
		created_timestamp, updated_timestamp)
		VALUES
		(#{firstName},#{lastName},TO_DATE(#{dob},'YYYY-MM-DD'),
		#{email},#{username},#{password},
		TO_DATE(#{registeredDate},'YYYY-MM-DD'),
		TO_DATE(#{activatedDate},'YYYY-MM-DD'),
		#{seniority},0,#{updateBy},#{createTimestamp}::timestamp without time
		zone,#{updateTimestamp}::timestamp without time zone)
	</insert>

	<!--Insert new record into Table department_detail -->
	<insert id="sqlInsertDepartmentDetailInsert"
		parameterType="Integer">
		INSERT INTO public.department_detail
		(status,department_id,user_id)
		VALUES 
		(#{status},#{departmentId},#{userId})
	</insert>

	<!--insert record into Tables  user_role, user_department -->


	<!-- =========== UPDATE =============== -->


	<!--Update record in Table User -->
	<update id="sqlUpdateUserUpdate"
		parameterType="com.mockproject.du1.model.Users">
		UPDATE public.users
		SET
		first_name=#{firstName},last_name=#{lastName},email=#{email},username=#{username},password=#{password},dob=TO_DATE(#{dob},'YYYY-MM-DD'),
		registered_date=TO_DATE(#{registeredDate},'YYYY-MM-DD'), activated_date=TO_DATE(#{activatedDate},'YYYY-MM-DD'),
		seniority=#{seniority},is_activated=#{isActivated}, updated_by=#{updatedBy}, created_timestamp=#{createdTimestamp}, updated_timestamp=#{updatedTimestamp}
		WHERE
		user_id=#{userId}
	</update>

	<!--Update record in Table user_role -->
	<update id="sqlUpdateUserRoleUpdate" parameterType="com.mockproject.du1.model.UserRole">
		UPDATE
		public.role_detail
		SET join_date=(#{joinDate},'YYYY-MM-DD'),
		leave_date=(#{leaveDate},'YYYY-MM-DD'),
		updated_by=#{updatedBy},
		created_timestamp=#{createdTimestamp}, updated_timestamp=#{updatedTimestamp},
		role_id=#{roleId}
		WHERE
		user_id=#{userId}
	</update>

	<!--Update record in Table user_department -->
	<update id="sqlUpdateUserDepartmentUpdate" parameterType="com.mockproject.du1.model.UserDepartment">
		UPDATE
		public.user_department
		SET join_date=(#{joinDate},'YYYY-MM-DD'),
		leave_date=(#{leaveDate},'YYYY-MM-DD'),
		stay_or_leave=#{stayOrLeave},
		updated_by=#{updatedBy},
		created_timestamp=#{createdTimestamp}, updated_timestamp=#{updatedTimestamp},
		role_id=#{roleId}
		WHERE
		user_id=#{userId}
	</update>

	<!--Update record in Table department_detail -->
	<update id="sqlDeleteUserUpdate" parameterType="com.mockproject.du1.model.Users">
		UPDATE
		public.users
		SET activated_date=#{activatedDate}
		is_activated=#{}
		WHERE
		user_id=#{userId}
	</update>

	<!--Update record in Tables users-->
	<update id="sqlActivateUserUpdate" parameterType="Integer">
		UPDATE
		public.users
		SET activated_date=#{activatedDate},
		is_activated=#{isActivated},
		updated_by=#{updatedBy},
		updated_timestamp=#{updatedTimestamp}
		WHERE
		user_id=#{userId};
		
 		INSERT INTO public.user_role
 		(join_date,leave_date,updated_by,created_timestamp,updated_timestamp)
 		VALUES
 		(#{joinDate},#{leaveDate},#{updatedBy},#{createdTimestamp},#{updatedTimestamp});
 		
 		
	</update>


	<!-- =========== DELETE =============== -->
	<!--Delete records in Table department_detail -->
	<delete id="sqlDeleteDepartmentDetailDelete"
		parameterType="Integer">

	</delete>


</mapper>